{"version":3,"sources":["../../api/services/menu.services.js"],"names":["MenuService","fetchMenus","validMenus","dummyDBData","menus","map","menu","newMenu","Menu","availableOn","mealOptions","addAMealOption","newMealOption","addedOn","mealOptionArr","menuToAdd","dateExisted","selectedMeal","meals","find","mealOption","id","newMeal","push","getMenuForParticularDay","menuForAParticularDay"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,IAAMA,WAAW,GAAG;AAClBC,EAAAA,UADkB,wBACL;AACX,QAAMC,UAAU,GAAGC,qBAAYC,KAAZ,CAAkBC,GAAlB,CAAsB,UAACC,IAAD,EAAU;AACjD,UAAMC,OAAO,GAAG,IAAIC,aAAJ,EAAhB;AACAD,MAAAA,OAAO,CAACE,WAAR,GAAsBH,IAAI,CAACG,WAA3B;AACAF,MAAAA,OAAO,CAACG,WAAR,GAAsBJ,IAAI,CAACI,WAA3B;AACA,aAAOH,OAAP;AACD,KALkB,CAAnB;;AAMA,WAAOL,UAAP;AACD,GATiB;AAUlBS,EAAAA,cAVkB,0BAUHC,aAVG,EAUY;AAC5B;;;;;;;;;;;;;;;;AAiBA,QAAMC,OAAO,GAAGD,aAAa,CAACH,WAA9B;AACA,QAAMK,aAAa,GAAG,EAAtB,CAnB4B,CAoB5B;;AACA,QAAMC,SAAS,GAAGZ,qBAAYC,KAAZ,CAAkBC,GAAlB,CAAsB,UAACC,IAAD,EAAU;AAChD,UAAMU,WAAW,GAAGV,IAAI,CAACG,WAAzB;;AACA,UAAMQ,YAAY,GAAGd,qBAAYe,KAAZ,CAClBC,IADkB,CACb,UAAAC,UAAU;AAAA,eAAIA,UAAU,CAACC,EAAX,KAAkBT,aAAa,CAACQ,UAAd,CAAyBC,EAA/C;AAAA,OADG,CAArB;;AAEA,UAAMC,OAAO,GAAIN,WAAW,KAAKH,OAAjB,IACdP,IAAI,CAACI,WAAL,CAAiBa,IAAjB,CAAsBN,YAAtB,GACA;AACER,QAAAA,WAAW,EAAEO,WADf;AAEEI,QAAAA,UAAU,EAAEH;AAFd,OAFc,KAOdH,aAAa,CAACS,IAAd,CAAmBN,YAAnB,GACAd,qBAAYC,KAAZ,CAAkBmB,IAAlB,CAAuB;AACrBd,QAAAA,WAAW,EAAEI,OADQ;AAErBH,QAAAA,WAAW,EAAEI;AAFQ,OAAvB,CADA,EAKA;AACEL,QAAAA,WAAW,EAAEI,OADf;AAEEO,QAAAA,UAAU,EAAEN;AAFd,OAZc,CAAhB;AAiBA,aAAOQ,OAAP;AACD,KAtBiB,CAAlB;;AAuBA,WAAOP,SAAP;AACD,GAvDiB;AAwDlBS,EAAAA,uBAxDkB,mCAwDMf,WAxDN,EAwDmB;AACnC,QAAMgB,qBAAqB,GAAGtB,qBAAYC,KAAZ,CAAkBe,IAAlB,CAAuB,UAAAb,IAAI;AAAA,aAAIA,IAAI,CAACG,WAAL,KAAqBA,WAAzB;AAAA,KAA3B,CAA9B;;AACA,WAAOgB,qBAAqB,IAAI,EAAhC;AACD;AA3DiB,CAApB;eA8DezB,W","sourcesContent":["import dummyDBData from '../utils/dummyDBData';\nimport Menu from '../models/menu.models';\n\nconst MenuService = {\n  fetchMenus() {\n    const validMenus = dummyDBData.menus.map((menu) => {\n      const newMenu = new Menu();\n      newMenu.availableOn = menu.availableOn;\n      newMenu.mealOptions = menu.mealOptions;\n      return newMenu;\n    });\n    return validMenus;\n  },\n  addAMealOption(newMealOption) {\n    /*\n      Expeting an object that contains,\n      if no menu has already been set for the  day\n      { \"availableOn\": moment().format() To be handled by moment.now\n        \"mealOption\": [\n          {\n            id\n            name\n            price\n            description\n          }\n        ];\n      }\n      If it has, then matched available on is sort for\n      and only a full meal description is added to the mealOptions\n\n    */\n    const addedOn = newMealOption.availableOn;\n    const mealOptionArr = [];\n    // const menuKeys = Object.keys(menus);\n    const menuToAdd = dummyDBData.menus.map((menu) => {\n      const dateExisted = menu.availableOn;\n      const selectedMeal = dummyDBData.meals\n        .find(mealOption => mealOption.id === newMealOption.mealOption.id);\n      const newMeal = (dateExisted === addedOn) ? (\n        menu.mealOptions.push(selectedMeal),\n        {\n          availableOn: dateExisted,\n          mealOption: selectedMeal,\n        }\n      ) : (\n        mealOptionArr.push(selectedMeal),\n        dummyDBData.menus.push({\n          availableOn: addedOn,\n          mealOptions: mealOptionArr,\n        }),\n        {\n          availableOn: addedOn,\n          mealOption: mealOptionArr,\n        }\n      );\n      return newMeal;\n    });\n    return menuToAdd;\n  },\n  getMenuForParticularDay(availableOn) {\n    const menuForAParticularDay = dummyDBData.menus.find(menu => menu.availableOn === availableOn);\n    return menuForAParticularDay || {};\n  },\n};\n\nexport default MenuService;\n"],"file":"menu.services.js"}